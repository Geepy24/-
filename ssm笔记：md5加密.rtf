{\rtf1\ansi\ansicpg936\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww23180\viewh12080\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs32 \cf0 MD5
\f1 \'d1\'ce\'d6\'b5\'bc\'d3\'c3\'dc\'c3\'dc\'c2\'eb\'a3\'ba\'d6\'b1\'bd\'d3\'b8\'b4\'d6\'c6\'d5\'b3\'cc\'f9\'ca\'b9\'d3\'c3\
package cn.geepy.blog.utils;\
import java.io.UnsupportedEncodingException;\
import java.security.MessageDigest;\
import java.security.NoSuchAlgorithmException;\
import java.util.Random;\
\
public class MD5Utils \{\
\
 /**\
    * byte[]\'d7\'d6\'bd\'da\'ca\'fd\'d7\'e9 \'d7\'aa\'bb\'bb\'b3\'c9 \'ca\'ae\'c1\'f9\'bd\'f8\'d6\'c6\'d7\'d6\'b7\'fb\'b4\'ae\
    * \
    * @param arr \'d2\'aa\'d7\'aa\'bb\'bb\'b5\'c4byte[]\'d7\'d6\'bd\'da\'ca\'fd\'d7\'e9\
    *\
    * @return  String \'b7\'b5\'bb\'d8\'ca\'ae\'c1\'f9\'bd\'f8\'d6\'c6\'d7\'d6\'b7\'fb\'b4\'ae\
    */\
    private static String hex(byte[] arr) \{\
	     StringBuffer sb = new StringBuffer();\
	     for (int i = 0; i < arr.length; ++i) \{\
		     sb.append(Integer.toHexString((arr[i] & 0xFF) | 0x100).substring(1, 3));\
	     \}\
	     return sb.toString();\
    \}\
\
\
\
\
  /**\
    * MD5\'bc\'d3\'c3\'dc,\'b2\'a2\'b0\'d1\'bd\'e1\'b9\'fb\'d3\'c9\'d7\'d6\'bd\'da\'ca\'fd\'d7\'e9\'d7\'aa\'bb\'bb\'b3\'c9\'ca\'ae\'c1\'f9\'bd\'f8\'d6\'c6\'d7\'d6\'b7\'fb\'b4\'ae\
    * \
    * @param str \'d2\'aa\'bc\'d3\'c3\'dc\'b5\'c4\'c4\'da\'c8\'dd\
    * \
    * @return String \'b7\'b5\'bb\'d8\'bc\'d3\'c3\'dc\'ba\'f3\'b5\'c4\'ca\'ae\'c1\'f9\'bd\'f8\'d6\'c6\'d7\'d6\'b7\'fb\'b4\'ae\
    */\
    private static String md5Hex(String str) \{\
      try \{\
          MessageDigest md = MessageDigest.getInstance("MD5");\
          byte[] digest = md.digest(str.getBytes());\
          return hex(digest);\
      \} catch (Exception e) \{\
          e.printStackTrace();\
          System.out.println(e.toString());\
          return "";\
      \}\
    \}\
\
\
\
  /**\
    * \'c9\'fa\'b3\'c9\'ba\'ac\'d3\'d0\'cb\'e6\'bb\'fa\'d1\'ce\'b5\'c4\'c3\'dc\'c2\'eb\
    *\
    * @param password \'d2\'aa\'bc\'d3\'c3\'dc\'b5\'c4\'c3\'dc\'c2\'eb\
    *\
    * @return String \'ba\'ac\'d3\'d0\'cb\'e6\'bb\'fa\'d1\'ce\'b5\'c4\'c3\'dc\'c2\'eb\
    */\
    public static String getSaltMD5(String password) \{\
		// \'c9\'fa\'b3\'c9\'d2\'bb\'b8\'f616\'ce\'bb\'b5\'c4\'cb\'e6\'bb\'fa\'ca\'fd\
       Random random = new Random();\
       StringBuilder sBuilder = new StringBuilder(16);\
       sBuilder.append(random.nextInt(99999999)).append(random.nextInt(99999999));\
       int len = sBuilder.length();\
       if (len < 16) \{\
             for (int i = 0; i < 16 - len; i++) \{\
               sBuilder.append("0");\
           \}\
       \}\
       // \'c9\'fa\'b3\'c9\'d7\'ee\'d6\'d5\'b5\'c4\'bc\'d3\'c3\'dc\'d1\'ce\
       String salt = sBuilder.toString();\
       password = md5Hex(password + salt);\
       char[] cs = new char[48];\
       for (int i = 0; i < 48; i += 3) \{\
           cs[i] = password.charAt(i / 3 * 2);\
           char c = salt.charAt(i / 3);\
           cs[i + 1] = c;\
           cs[i + 2] = password.charAt(i / 3 * 2 + 1);\
       \}\
       return String.valueOf(cs);\
    \}\
\
\
\
  /**\
    * \'d1\'e9\'d6\'a4\'bc\'d3\'d1\'ce\'ba\'f3\'b5\'c4md5str\'ca\'c7\'b7\'f1\'ba\'cd\'c3\'dc\'c2\'ebpassword\'d2\'bb\'d6\'c2\
    * \
    * @param password \'d4\'ad\'c3\'dc\'c2\'eb\'bb\'f2\'d3\'c3\'bb\'a7\'ca\'e4\'c8\'eb\'b5\'c4\'c3\'dc\'c2\'eb\
    * \
    * @param md5str \'bc\'d3\'c3\'dc\'d6\'ae\'ba\'f3\'b5\'c4\'c3\'dc\'c2\'eb\
    * \
    *@return boolean true\'b1\'ed\'ca\'be\'ba\'cd\'d4\'ad\'c3\'dc\'c2\'eb\'d2\'bb\'d6\'c2   false\'b1\'ed\'ca\'be\'ba\'cd\'d4\'ad\'c3\'dc\'c2\'eb\'b2\'bb\'d2\'bb\'d6\'c2\
    */\
    public static boolean getSaltverifyMD5(String password, String md5str) \{\
       char[] cs1 = new char[32];\
       char[] cs2 = new char[16];\
       for (int i = 0; i < 48; i += 3) \{\
           cs1[i / 3 * 2] = md5str.charAt(i);\
           cs1[i / 3 * 2 + 1] = md5str.charAt(i + 2);\
           cs2[i / 3] = md5str.charAt(i + 1);\
       \}\
       String Salt = new String(cs2);\
       return md5Hex(password + Salt).equals(String.valueOf(cs1));\
    \}\
\
\
   \
   public static void main(String[] args) \{\
       // \'d4\'ad\'c3\'dc\'c2\'eb\
       String plaintext = "123";\
\
       // \'bb\'f1\'c8\'a1\'bc\'d3\'d1\'ce\'ba\'f3\'b5\'c4MD5\'d6\'b5\
       String ciphertext = MD5Utils.getSaltMD5(plaintext);\
       System.out.println("\'bc\'d3\'d1\'ce\'ba\'f3MD5\'a3\'ba" + ciphertext);\
       \
       System.out.println("\'ca\'c7\'b7\'f1\'ca\'c7\'cd\'ac\'d2\'bb\'d7\'d6\'b7\'fb\'b4\'ae:" + MD5Utils.getSaltverifyMD5(plaintext, ciphertext));\
   \}\
\
\}\
\
}